// Mocks generated by Mockito 5.4.5 from annotations
// in weather_app/test/features/weather/data/repositories/weather_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:geolocator/geolocator.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/core/network/network_info.dart' as _i5;
import 'package:weather_app/core/services/location_services.dart' as _i7;
import 'package:weather_app/features/locations/data/data_sources/local_data_source/favorite_locations_local_data_source.dart'
    as _i9;
import 'package:weather_app/features/locations/data/models/favorite_location_model.dart'
    as _i10;
import 'package:weather_app/features/weather/data/data_sources/remote_data_source/weather_api.dart'
    as _i8;
import 'package:weather_app/features/weather/data/models/location_current_weather_model.dart'
    as _i4;
import 'package:weather_app/features/weather/data/models/weather_forecast_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePosition_0 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWeatherForecastModel_1 extends _i1.SmartFake
    implements _i3.WeatherForecastModel {
  _FakeWeatherForecastModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLocationCurrentWeatherModel_2 extends _i1.SmartFake
    implements _i4.LocationCurrentWeatherModel {
  _FakeLocationCurrentWeatherModel_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  @override
  _i6.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i6.Future<bool>.value(false),
            returnValueForMissingStub: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);
}

/// A class which mocks [LocationServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationServices extends _i1.Mock implements _i7.LocationServices {
  @override
  _i6.Future<_i2.Position> getDeviceLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getDeviceLocation, []),
            returnValue: _i6.Future<_i2.Position>.value(
              _FakePosition_0(this, Invocation.method(#getDeviceLocation, [])),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Position>.value(
              _FakePosition_0(this, Invocation.method(#getDeviceLocation, [])),
            ),
          )
          as _i6.Future<_i2.Position>);
}

/// A class which mocks [WeatherApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherApi extends _i1.Mock implements _i8.WeatherApi {
  @override
  _i6.Future<_i3.WeatherForecastModel> fetchWeatherForecast({
    required double? lat,
    required double? lon,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchWeatherForecast, [], {
              #lat: lat,
              #lon: lon,
            }),
            returnValue: _i6.Future<_i3.WeatherForecastModel>.value(
              _FakeWeatherForecastModel_1(
                this,
                Invocation.method(#fetchWeatherForecast, [], {
                  #lat: lat,
                  #lon: lon,
                }),
              ),
            ),
            returnValueForMissingStub:
                _i6.Future<_i3.WeatherForecastModel>.value(
                  _FakeWeatherForecastModel_1(
                    this,
                    Invocation.method(#fetchWeatherForecast, [], {
                      #lat: lat,
                      #lon: lon,
                    }),
                  ),
                ),
          )
          as _i6.Future<_i3.WeatherForecastModel>);

  @override
  _i6.Future<_i4.LocationCurrentWeatherModel> fetchLocationCurrentWeather({
    required String? locationName,
    required double? lat,
    required double? lon,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchLocationCurrentWeather, [], {
              #locationName: locationName,
              #lat: lat,
              #lon: lon,
            }),
            returnValue: _i6.Future<_i4.LocationCurrentWeatherModel>.value(
              _FakeLocationCurrentWeatherModel_2(
                this,
                Invocation.method(#fetchLocationCurrentWeather, [], {
                  #locationName: locationName,
                  #lat: lat,
                  #lon: lon,
                }),
              ),
            ),
            returnValueForMissingStub:
                _i6.Future<_i4.LocationCurrentWeatherModel>.value(
                  _FakeLocationCurrentWeatherModel_2(
                    this,
                    Invocation.method(#fetchLocationCurrentWeather, [], {
                      #locationName: locationName,
                      #lat: lat,
                      #lon: lon,
                    }),
                  ),
                ),
          )
          as _i6.Future<_i4.LocationCurrentWeatherModel>);
}

/// A class which mocks [FavoriteLocationsLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteLocationsLocalDataSource extends _i1.Mock
    implements _i9.FavoriteLocationsLocalDataSource {
  @override
  _i6.Future<int> addFavoriteLocation({
    required _i10.FavoriteLocationModel? favoriteLocation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addFavoriteLocation, [], {
              #favoriteLocation: favoriteLocation,
            }),
            returnValue: _i6.Future<int>.value(0),
            returnValueForMissingStub: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<List<_i10.FavoriteLocationModel>> fetchFavoriteLocations() =>
      (super.noSuchMethod(
            Invocation.method(#fetchFavoriteLocations, []),
            returnValue: _i6.Future<List<_i10.FavoriteLocationModel>>.value(
              <_i10.FavoriteLocationModel>[],
            ),
            returnValueForMissingStub:
                _i6.Future<List<_i10.FavoriteLocationModel>>.value(
                  <_i10.FavoriteLocationModel>[],
                ),
          )
          as _i6.Future<List<_i10.FavoriteLocationModel>>);

  @override
  _i6.Future<bool> deleteFavoriteLocation({required int? id}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFavoriteLocation, [], {#id: id}),
            returnValue: _i6.Future<bool>.value(false),
            returnValueForMissingStub: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);
}
