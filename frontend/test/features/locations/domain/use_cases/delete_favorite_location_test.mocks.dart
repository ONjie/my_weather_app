// Mocks generated by Mockito 5.4.5 from annotations
// in weather_app/test/features/locations/domain/use_cases/delete_favorite_location_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:either_dart/either.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:weather_app/core/failures/failures.dart' as _i5;
import 'package:weather_app/features/locations/domain/entities/favorite_location_entity.dart'
    as _i8;
import 'package:weather_app/features/locations/domain/entities/location_entity.dart'
    as _i6;
import 'package:weather_app/features/locations/domain/repositories/locations_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocationsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationsRepository extends _i1.Mock
    implements _i2.LocationsRepository {
  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.LocationEntity>>
  fetchLocationsSuggestions({required String? locationName}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchLocationsSuggestions, [], {
              #locationName: locationName,
            }),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, _i6.LocationEntity>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, _i6.LocationEntity>>(
                    this,
                    Invocation.method(#fetchLocationsSuggestions, [], {
                      #locationName: locationName,
                    }),
                  ),
                ),
            returnValueForMissingStub:
                _i3.Future<_i4.Either<_i5.Failure, _i6.LocationEntity>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, _i6.LocationEntity>>(
                    this,
                    Invocation.method(#fetchLocationsSuggestions, [], {
                      #locationName: locationName,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i6.LocationEntity>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, int>> addFavoriteLocation({
    required _i8.FavoriteLocationEntity? favoriteLocation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addFavoriteLocation, [], {
              #favoriteLocation: favoriteLocation,
            }),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, int>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, int>>(
                this,
                Invocation.method(#addFavoriteLocation, [], {
                  #favoriteLocation: favoriteLocation,
                }),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i4.Either<_i5.Failure, int>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, int>>(
                    this,
                    Invocation.method(#addFavoriteLocation, [], {
                      #favoriteLocation: favoriteLocation,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, int>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, List<_i8.FavoriteLocationEntity>>>
  fetchFavoriteLocations() =>
      (super.noSuchMethod(
            Invocation.method(#fetchFavoriteLocations, []),
            returnValue: _i3.Future<
              _i4.Either<_i5.Failure, List<_i8.FavoriteLocationEntity>>
            >.value(
              _i7.dummyValue<
                _i4.Either<_i5.Failure, List<_i8.FavoriteLocationEntity>>
              >(this, Invocation.method(#fetchFavoriteLocations, [])),
            ),
            returnValueForMissingStub: _i3.Future<
              _i4.Either<_i5.Failure, List<_i8.FavoriteLocationEntity>>
            >.value(
              _i7.dummyValue<
                _i4.Either<_i5.Failure, List<_i8.FavoriteLocationEntity>>
              >(this, Invocation.method(#fetchFavoriteLocations, [])),
            ),
          )
          as _i3.Future<
            _i4.Either<_i5.Failure, List<_i8.FavoriteLocationEntity>>
          >);

  @override
  _i3.Future<_i4.Either<_i5.Failure, bool>> deleteFavoriteLocation({
    required int? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFavoriteLocation, [], {#id: id}),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, bool>>.value(
              _i7.dummyValue<_i4.Either<_i5.Failure, bool>>(
                this,
                Invocation.method(#deleteFavoriteLocation, [], {#id: id}),
              ),
            ),
            returnValueForMissingStub:
                _i3.Future<_i4.Either<_i5.Failure, bool>>.value(
                  _i7.dummyValue<_i4.Either<_i5.Failure, bool>>(
                    this,
                    Invocation.method(#deleteFavoriteLocation, [], {#id: id}),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, bool>>);
}
