// Mocks generated by Mockito 5.4.5 from annotations
// in weather_app/test/features/locations/presentation/bloc/locations_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:either_dart/either.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:weather_app/core/failures/failures.dart' as _i6;
import 'package:weather_app/features/locations/domain/entities/favorite_location_entity.dart'
    as _i7;
import 'package:weather_app/features/locations/domain/entities/location_entity.dart'
    as _i12;
import 'package:weather_app/features/locations/domain/repositories/locations_repository.dart'
    as _i2;
import 'package:weather_app/features/locations/domain/use_cases/add_favorite_location.dart'
    as _i3;
import 'package:weather_app/features/locations/domain/use_cases/delete_favorite_location.dart'
    as _i10;
import 'package:weather_app/features/locations/domain/use_cases/fetch_favorite_locations.dart'
    as _i9;
import 'package:weather_app/features/locations/domain/use_cases/fetch_locations_suggestions.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationsRepository_0 extends _i1.SmartFake
    implements _i2.LocationsRepository {
  _FakeLocationsRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AddFavoriteLocation].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddFavoriteLocation extends _i1.Mock
    implements _i3.AddFavoriteLocation {
  @override
  _i2.LocationsRepository get favoriteLocationsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#favoriteLocationsRepository),
            returnValue: _FakeLocationsRepository_0(
              this,
              Invocation.getter(#favoriteLocationsRepository),
            ),
            returnValueForMissingStub: _FakeLocationsRepository_0(
              this,
              Invocation.getter(#favoriteLocationsRepository),
            ),
          )
          as _i2.LocationsRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, int>> execute({
    required _i7.FavoriteLocationEntity? favoriteLocation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {
              #favoriteLocation: favoriteLocation,
            }),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, int>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, int>>(
                this,
                Invocation.method(#execute, [], {
                  #favoriteLocation: favoriteLocation,
                }),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, int>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, int>>(
                    this,
                    Invocation.method(#execute, [], {
                      #favoriteLocation: favoriteLocation,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, int>>);
}

/// A class which mocks [FetchFavoriteLocations].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchFavoriteLocations extends _i1.Mock
    implements _i9.FetchFavoriteLocations {
  @override
  _i2.LocationsRepository get favoriteLocationsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#favoriteLocationsRepository),
            returnValue: _FakeLocationsRepository_0(
              this,
              Invocation.getter(#favoriteLocationsRepository),
            ),
            returnValueForMissingStub: _FakeLocationsRepository_0(
              this,
              Invocation.getter(#favoriteLocationsRepository),
            ),
          )
          as _i2.LocationsRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.FavoriteLocationEntity>>>
  execute() =>
      (super.noSuchMethod(
            Invocation.method(#execute, []),
            returnValue: _i4.Future<
              _i5.Either<_i6.Failure, List<_i7.FavoriteLocationEntity>>
            >.value(
              _i8.dummyValue<
                _i5.Either<_i6.Failure, List<_i7.FavoriteLocationEntity>>
              >(this, Invocation.method(#execute, [])),
            ),
            returnValueForMissingStub: _i4.Future<
              _i5.Either<_i6.Failure, List<_i7.FavoriteLocationEntity>>
            >.value(
              _i8.dummyValue<
                _i5.Either<_i6.Failure, List<_i7.FavoriteLocationEntity>>
              >(this, Invocation.method(#execute, [])),
            ),
          )
          as _i4.Future<
            _i5.Either<_i6.Failure, List<_i7.FavoriteLocationEntity>>
          >);
}

/// A class which mocks [DeleteFavoriteLocation].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteFavoriteLocation extends _i1.Mock
    implements _i10.DeleteFavoriteLocation {
  @override
  _i2.LocationsRepository get favoriteLocationsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#favoriteLocationsRepository),
            returnValue: _FakeLocationsRepository_0(
              this,
              Invocation.getter(#favoriteLocationsRepository),
            ),
            returnValueForMissingStub: _FakeLocationsRepository_0(
              this,
              Invocation.getter(#favoriteLocationsRepository),
            ),
          )
          as _i2.LocationsRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, bool>> execute({required int? id}) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {#id: id}),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, bool>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, bool>>(
                this,
                Invocation.method(#execute, [], {#id: id}),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, bool>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, bool>>(
                    this,
                    Invocation.method(#execute, [], {#id: id}),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, bool>>);
}

/// A class which mocks [FetchLocationsSuggestions].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchLocationsSuggestions extends _i1.Mock
    implements _i11.FetchLocationsSuggestions {
  @override
  _i2.LocationsRepository get locationsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#locationsRepository),
            returnValue: _FakeLocationsRepository_0(
              this,
              Invocation.getter(#locationsRepository),
            ),
            returnValueForMissingStub: _FakeLocationsRepository_0(
              this,
              Invocation.getter(#locationsRepository),
            ),
          )
          as _i2.LocationsRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i12.LocationEntity>> execute({
    required String? locationName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [], {#locationName: locationName}),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i12.LocationEntity>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i12.LocationEntity>>(
                    this,
                    Invocation.method(#execute, [], {
                      #locationName: locationName,
                    }),
                  ),
                ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, _i12.LocationEntity>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i12.LocationEntity>>(
                    this,
                    Invocation.method(#execute, [], {
                      #locationName: locationName,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i12.LocationEntity>>);
}
