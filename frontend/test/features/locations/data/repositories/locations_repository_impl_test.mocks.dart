// Mocks generated by Mockito 5.4.5 from annotations
// in weather_app/test/features/locations/data/repositories/locations_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/core/network/network_info.dart' as _i7;
import 'package:weather_app/features/locations/data/data_sources/local_data_source/favorite_locations_local_data_source.dart'
    as _i3;
import 'package:weather_app/features/locations/data/data_sources/remote_data_source/places_api.dart'
    as _i6;
import 'package:weather_app/features/locations/data/models/favorite_location_model.dart'
    as _i5;
import 'package:weather_app/features/locations/data/models/location_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationModel_0 extends _i1.SmartFake implements _i2.LocationModel {
  _FakeLocationModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FavoriteLocationsLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteLocationsLocalDataSource extends _i1.Mock
    implements _i3.FavoriteLocationsLocalDataSource {
  @override
  _i4.Future<int> addFavoriteLocation({
    required _i5.FavoriteLocationModel? favoriteLocation,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addFavoriteLocation, [], {
              #favoriteLocation: favoriteLocation,
            }),
            returnValue: _i4.Future<int>.value(0),
            returnValueForMissingStub: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.FavoriteLocationModel>> fetchFavoriteLocations() =>
      (super.noSuchMethod(
            Invocation.method(#fetchFavoriteLocations, []),
            returnValue: _i4.Future<List<_i5.FavoriteLocationModel>>.value(
              <_i5.FavoriteLocationModel>[],
            ),
            returnValueForMissingStub:
                _i4.Future<List<_i5.FavoriteLocationModel>>.value(
                  <_i5.FavoriteLocationModel>[],
                ),
          )
          as _i4.Future<List<_i5.FavoriteLocationModel>>);

  @override
  _i4.Future<bool> deleteFavoriteLocation({required int? id}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFavoriteLocation, [], {#id: id}),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [PlacesApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlacesApi extends _i1.Mock implements _i6.PlacesApi {
  @override
  _i4.Future<_i2.LocationModel> fetchLocationsSuggestions({
    required String? locationName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchLocationsSuggestions, [], {
              #locationName: locationName,
            }),
            returnValue: _i4.Future<_i2.LocationModel>.value(
              _FakeLocationModel_0(
                this,
                Invocation.method(#fetchLocationsSuggestions, [], {
                  #locationName: locationName,
                }),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.LocationModel>.value(
              _FakeLocationModel_0(
                this,
                Invocation.method(#fetchLocationsSuggestions, [], {
                  #locationName: locationName,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.LocationModel>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(
            Invocation.getter(#isConnected),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
